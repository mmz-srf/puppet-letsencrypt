#!/bin/bash

DOCROOT="<%= scope.lookupvar("letsencrypt::docroot") %>"
CONTACT_EMAIL="<%= scope.lookupvar("letsencrypt::contact_email") %>"
[ -z "$CONTACT_EMAIL" ] || {
  CONTACT_EMAIL="--email $CONTACT_EMAIL"
}
VALID_SECONDS="<%= scope.lookupvar("letsencrypt::valid_seconds") %>"
[ -z "$VALID_SECONDS" ] || {
  VALID_SECONDS="--valid_min $VALID_SECONDS"
}

[ -z "$1" ] && [ -z "$DOMAIN" ] && {
  echo "This script must be run with at least one domainname as parameter"
  echo -e "\nUsage:\n\t$0 domainname [domainname1]"
  exit 1
}

# keep a copy of all parameters for the package description
DESCRIPTION="$@"

ALLDOMAINS=""
DOMAIN=""
while ! [ -z "$1" ]; do
  [ -z "$DOMAIN" ] && {
    export DOMAIN="$1"
  }
  ALLDOMAINS="$ALLDOMAINS -d $1:$DOCROOT"
  shift
done

source <%= scope.lookupvar("letsencrypt::install_dir") %>/bin/activate
mkdir -p "<%= scope.lookupvar("letsencrypt::run_dir") %>/$DOMAIN"
cd "<%= scope.lookupvar("letsencrypt::run_dir") %>/$DOMAIN"

<%= scope.lookupvar("letsencrypt::install_dir") %>/bin/simp_le \
  $CA_SERVER \
  $CONTACT_EMAIL \
  $VALID_SECONDS \
  $ALLDOMAINS \
  --tos_sha256 <%= scope.lookupvar("letsencrypt::tos_sha256") %> \
  -f key.pem \
  -f cert.pem \
  -f chain.pem \
  -f account_key.json
CERTIFICATE_STATUS=$?

[ "$CERTIFICATE_STATUS" = "1" ] && {
  echo "Certificate renewal is not necessary"
  exit 0
}

[ "$CERTIFICATE_STATUS" = "2" ] && {
  echo "Renewing certificate failed."
  exit 1
}

[ -f key.pem ] && [ -f cert.pem ] && [ -f chain.pem ] || {
  echo "Expected that three files are present in $DOMAIN: key.pem, cert.pem, chain.pem"
  exit 1
}


# Build a debian package named $PACKAGENAME from the certificate at $SOURCE_ROOT/$FILENAME
# Installation on the target machine happens at $PREFIX

SERVICE=$(echo -n $DOMAIN | tr -c '[:alnum:]' '-')
PACKAGENAME="<%= scope.lookupvar("letsencrypt::packagename_prefix") %>-$SERVICE"
DEST_DIR="<%= scope.lookupvar("letsencrypt::package_install_dir") %>/$DOMAIN"

rm -rf build
mkdir -p "build/${DEST_DIR}"
cp key.pem cert.pem chain.pem "build/$DEST_DIR/"
for f in key.pem cert.pem chain.pem; do cat $f; echo; done > "build/$DEST_DIR/combined.pem"
VERSION=$(date -d "$(openssl x509 -startdate -noout -in "build/$DEST_DIR/cert.pem" | cut -f2 -d=)" +"%Y.%m.%d")
ENDDATE=$(date -d "$(openssl x509 -enddate -noout -in "build/$DEST_DIR/cert.pem" | cut -f2 -d=)" +"%Y.%m.%d")
FILENAME=${PACKAGENAME}_"${VERSION}~${ENDDATE}"_all.deb

if ! [ -f $FILENAME ];
then
  fpm --deb-no-default-config-files -a noarch -s dir -t deb -n "$PACKAGENAME" -v "$VERSION~$ENDDATE" --description "${DESCRIPTION}" -C build . || {
    echo "ERROR: Could not create the .deb package"
    exit 1
  }
fi

# show contents of created package:
echo "${FILENAME} is ready"
dpkg -c ${FILENAME}
